version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gw2_postgres_staging
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-gw2_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-gw2_password_staging}
      POSTGRES_DB: ${POSTGRES_DB:-gw2_wvw_builder}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
      - ./backend/scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    networks:
      - gw2_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gw2_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gw2_redis_staging
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_staging} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_staging:/data
    ports:
      - "6380:6379"
    networks:
      - gw2_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: gw2_backend_staging
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-gw2_user}:${POSTGRES_PASSWORD:-gw2_password_staging}@postgres:5432/${POSTGRES_DB:-gw2_wvw_builder}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password_staging}
      CACHE_ENABLED: "true"
      CACHE_TTL: "3600"
      
      # JWT
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      REFRESH_SECRET_KEY: ${REFRESH_SECRET_KEY:-your-refresh-secret-key-change-in-production}
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      REFRESH_TOKEN_EXPIRE_DAYS: "7"
      
      # API
      API_V1_STR: "/api/v1"
      PROJECT_NAME: "GW2 WvW Builder - Staging"
      BACKEND_CORS_ORIGINS: '["http://localhost:5173","http://localhost","http://frontend:5173","https://staging.gw2builder.local"]'
      
      # GW2 API
      GW2_API_KEY: ${GW2_API_KEY:-}
      
      # Environment
      ENVIRONMENT: "staging"
      DEBUG: "false"
      LOG_LEVEL: "INFO"
      
      # Monitoring
      PROMETHEUS_ENABLED: "true"
      SENTRY_DSN: ${SENTRY_DSN:-}
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/keys.json:/app/keys.json:ro
    ports:
      - "8001:8000"
    networks:
      - gw2_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 2
      "

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8001}
    container_name: gw2_frontend_staging
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8001}
      VITE_ENVIRONMENT: "staging"
      VITE_SENTRY_DSN: ${VITE_SENTRY_DSN:-}
    ports:
      - "5174:80"
    networks:
      - gw2_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: gw2_nginx_staging
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    volumes:
      - ./deployment/nginx/staging.conf:/etc/nginx/conf.d/default.conf:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - gw2_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: gw2_prometheus_staging
    restart: unless-stopped
    volumes:
      - ./deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    networks:
      - gw2_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: gw2_grafana_staging
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_staging}
      GF_SERVER_ROOT_URL: http://localhost:3000
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./deployment/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - gw2_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Backup Service
  postgres_backup:
    image: prodrigestivill/postgres-backup-local:15-alpine
    container_name: gw2_postgres_backup_staging
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-gw2_wvw_builder}
      POSTGRES_USER: ${POSTGRES_USER:-gw2_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-gw2_password_staging}
      SCHEDULE: "@daily"
      BACKUP_KEEP_DAYS: 7
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 3
      HEALTHCHECK_PORT: 8080
    volumes:
      - ./backups/postgres:/backups
    networks:
      - gw2_network

networks:
  gw2_network:
    driver: bridge
    name: gw2_staging_network

volumes:
  postgres_data_staging:
    name: gw2_postgres_data_staging
  redis_data_staging:
    name: gw2_redis_data_staging
  prometheus_data:
    name: gw2_prometheus_data
  grafana_data:
    name: gw2_grafana_data
  nginx_logs:
    name: gw2_nginx_logs
