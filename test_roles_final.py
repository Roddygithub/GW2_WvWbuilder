#!/usr/bin/env python3
"""Test final pour v√©rifier le chargement des r√¥les"""
import requests
import json

BASE_URL = "http://localhost:8000/api/v1"

def test_roles_loading():
    print("=" * 60)
    print("üß™ TEST: Chargement des r√¥les ORM")
    print("=" * 60)
    
    # 1. Login
    print("\n1Ô∏è‚É£ Login...")
    response = requests.post(
        f"{BASE_URL}/auth/login",
        data={
            "username": "frontend@user.com",
            "password": "Frontend123!"
        }
    )
    
    if response.status_code != 200:
        print(f"‚ùå Login failed: {response.status_code}")
        print(response.text)
        return False
    
    token = response.json()["access_token"]
    print("‚úÖ Login successful")
    
    # 2. Get user info
    print("\n2Ô∏è‚É£ GET /users/me...")
    response = requests.get(
        f"{BASE_URL}/users/me",
        headers={"Authorization": f"Bearer {token}"}
    )
    
    if response.status_code != 200:
        print(f"‚ùå Request failed: {response.status_code}")
        print(response.text)
        return False
    
    user_data = response.json()
    print("‚úÖ Request successful")
    
    # 3. Display result
    print("\n3Ô∏è‚É£ User data:")
    print(json.dumps(user_data, indent=2))
    
    # 4. Check roles
    print("\n4Ô∏è‚É£ Roles check:")
    roles = user_data.get("roles", [])
    
    if not roles:
        print("‚ùå FAILED: No roles loaded")
        print(f"   User: {user_data.get('username')}")
        print(f"   Email: {user_data.get('email')}")
        return False
    
    print(f"‚úÖ SUCCESS! User has {len(roles)} role(s):")
    for role in roles:
        print(f"   - {role.get('name')} (ID: {role.get('id')})")
    
    return True

if __name__ == "__main__":
    success = test_roles_loading()
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ TEST PASSED: Roles ORM fixed!")
    else:
        print("‚ùå TEST FAILED: Roles not loading")
    print("=" * 60)
    exit(0 if success else 1)
