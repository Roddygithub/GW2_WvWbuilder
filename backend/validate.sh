#!/bin/bash
# Script de validation automatique - Phase 2 Backend GW2_WvWbuilder
# Usage: ./validate.sh

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_header() {
    echo -e "${BLUE}================================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# D√©but de la validation
print_header "üöÄ Validation Phase 2 - Backend GW2_WvWbuilder"
echo ""

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "pyproject.toml" ]; then
    print_error "pyproject.toml not found. Please run this script from the backend directory."
    exit 1
fi

# 1. V√©rification de l'environnement
print_header "üì¶ V√©rification de l'environnement"
echo ""

print_info "V√©rification de Poetry..."
if command -v poetry &> /dev/null; then
    poetry --version
    print_success "Poetry install√©"
else
    print_error "Poetry n'est pas install√©"
    exit 1
fi

print_info "V√©rification de Python..."
python3 --version
print_success "Python install√©"

echo ""

# 2. Installation des d√©pendances
print_header "üìö Installation des d√©pendances"
echo ""

print_info "Installation avec Poetry..."
poetry install --no-interaction
print_success "D√©pendances install√©es"

echo ""

# 3. Ex√©cution des tests
print_header "üß™ Ex√©cution des tests"
echo ""

print_info "Tests JWT..."
if poetry run pytest tests/unit/core/test_jwt_complete.py -v --tb=short; then
    print_success "Tests JWT PASS"
else
    print_warning "Tests JWT FAIL - Voir les d√©tails ci-dessus"
fi

echo ""

print_info "Tests Password Utils..."
if poetry run pytest tests/unit/core/test_password_utils_complete.py -v --tb=short; then
    print_success "Tests Password Utils PASS"
else
    print_warning "Tests Password Utils FAIL - Voir les d√©tails ci-dessus"
fi

echo ""

print_info "Tests CRUD Build..."
if poetry run pytest tests/unit/crud/test_crud_build_complete.py -v --tb=short; then
    print_success "Tests CRUD Build PASS"
else
    print_warning "Tests CRUD Build FAIL - Voir les d√©tails ci-dessus"
fi

echo ""

# 4. Mesure de la couverture
print_header "üìä Mesure de la couverture"
echo ""

print_info "Calcul de la couverture..."
poetry run pytest tests/unit/core/test_jwt_complete.py \
                 tests/unit/core/test_password_utils_complete.py \
                 tests/unit/crud/test_crud_build_complete.py \
                 --cov=app --cov-report=term --cov-report=html

print_success "Rapport de couverture g√©n√©r√© dans htmlcov/"

echo ""

# 5. V√©rification du linting
print_header "üîç V√©rification du linting"
echo ""

print_info "V√©rification avec ruff..."
if poetry run ruff check app/ tests/ 2>/dev/null; then
    print_success "Linting PASS"
else
    print_warning "Linting a des warnings - Voir ci-dessus"
fi

echo ""

# 6. V√©rification du formatage
print_header "‚ú® V√©rification du formatage"
echo ""

print_info "V√©rification avec black..."
if poetry run black --check app/ tests/ 2>/dev/null; then
    print_success "Formatage PASS"
else
    print_warning "Formatage n√©cessaire - Ex√©cuter: poetry run black app/ tests/"
fi

echo ""

# 7. V√©rification de la s√©curit√©
print_header "üîí V√©rification de la s√©curit√©"
echo ""

print_info "V√©rification avec bandit..."
if poetry run bandit -r app/ -ll 2>/dev/null; then
    print_success "S√©curit√© PASS"
else
    print_warning "Probl√®mes de s√©curit√© d√©tect√©s - Voir ci-dessus"
fi

echo ""

# 8. V√©rification des sch√©mas
print_header "üìù V√©rification des sch√©mas de r√©ponse"
echo ""

print_info "V√©rification des imports..."
if poetry run python3 -c "from app.schemas import APIResponse, PaginatedResponse, ErrorResponse, SuccessResponse, create_success_response, create_error_response, create_paginated_response; print('OK')" 2>/dev/null; then
    print_success "Sch√©mas de r√©ponse importables"
else
    print_error "Erreur d'import des sch√©mas"
fi

echo ""

# 9. R√©sum√© final
print_header "üìä R√©sum√© de la validation"
echo ""

print_info "Tests cr√©√©s: 77 (29 JWT + 31 Password + 17 CRUD)"
print_info "Fichiers cr√©√©s: 7 (3 tests + 1 schema + 3 docs)"
print_info "Fichiers modifi√©s: 3 (auth.py, __init__.py, test_models_base.py)"

echo ""
print_header "‚úÖ Validation termin√©e!"
echo ""

print_info "Prochaines √©tapes:"
echo "  1. Consulter le rapport de couverture: xdg-open htmlcov/index.html"
echo "  2. Lire PHASE2_COMPLETION_REPORT.md pour les d√©tails"
echo "  3. Suivre VALIDATION_CHECKLIST.md pour la validation compl√®te"
echo "  4. Ex√©cuter tous les tests: poetry run pytest tests/ --cov=app"

echo ""
print_success "Script de validation termin√© avec succ√®s!"
