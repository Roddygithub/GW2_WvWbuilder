"""Integration tests for Team Members API endpoints."""
import pytest
from fastapi import status
from fastapi.testclient import TestClient
from sqlalchemy.ext.asyncio import AsyncSession
from app.core.security import create_access_token
from app.models import User, Team, TeamMember, TeamRole, TeamStatus
from datetime import datetime, timezone
from typing import Dict, Any

# Test data
TEST_MEMBER_EMAIL = "member@example.com"
TEST_MEMBER_USERNAME = "testmember"
TEST_MEMBER_FULL_NAME = "Test Member"


@pytest.fixture
async def test_member_user(async_db_session: AsyncSession) -> User:
    """Create a test member user."""
    from app.core.security import get_password_hash
    
    user = User(
        username=TEST_MEMBER_USERNAME,
        email=TEST_MEMBER_EMAIL,
        hashed_password=get_password_hash("testpassword"),
        full_name=TEST_MEMBER_FULL_NAME,
        is_active=True,
        is_superuser=False,
    )
    async_db_session.add(user)
    await async_db_session.commit()
    await async_db_session.refresh(user)
    return user


@pytest.fixture
async def test_team(async_db_session: AsyncSession, test_user: User) -> Team:
    """Create a test team."""
    team = Team(
        name="Test Team",
        description="Test Team Description",
        status=TeamStatus.ACTIVE,
        owner_id=test_user.id,
        created_at=datetime.now(timezone.utc),
        updated_at=datetime.now(timezone.utc),
        is_public=False
    )
    async_db_session.add(team)
    await async_db_session.commit()
    await async_db_session.refresh(team)
    
    # Add the owner as a team member
    team_member = TeamMember(
        team_id=team.id,
        user_id=test_user.id,
        role=TeamRole.LEADER,
        is_admin=True,
        joined_at=datetime.now(timezone.utc),
        is_active=True
    )
    async_db_session.add(team_member)
    await async_db_session.commit()
    
    return team


class TestTeamMembersAPI:
    """Test cases for Team Members API endpoints."""

    @pytest.mark.asyncio
        self, 
        async_client: TestClient, 
        test_user: User,
        test_team: Team,
        test_member_user: User,
        async_db_session: AsyncSession
    ) -> None:
        """Test adding a team member."""
        # Get the actual user and team objects from the fixtures
        user = await test_user if hasattr(test_user, '__await__') else test_user
        team = await test_team if hasattr(test_team, '__await__') else test_team
        member_user = await test_member_user if hasattr(test_member_user, '__await__') else test_member_user
        
        # Create an access token for the test user (team owner/admin)
        access_token = create_access_token(subject=user.id)
        
        # First, add the member to the team
{{ ... }}
        self, 
        async_client: TestClient, 
        test_user: User,
        test_team: Team,
        test_member_user: User,
        async_db_session: AsyncSession
    ) -> None:
        """Test getting a team member."""
        # Get the actual user and team objects from the fixtures
        user = await test_user if hasattr(test_user, '__await__') else test_user
        team = await test_team if hasattr(test_team, '__await__') else test_team
        member_user = await test_member_user if hasattr(test_member_user, '__await__') else test_member_user
        
        # Add the test member to the team
        team_member = TeamMember(
            team_id=team.id,
            user_id=member_user.id,
{{ ... }}
        self, 
        async_client: TestClient, 
        test_user: User,
        test_team: Team,
        test_member_user: User,
        async_db_session: AsyncSession
    ) -> None:
        """Test updating a team member."""
        # Get the actual user and team objects from the fixtures
        user = await test_user if hasattr(test_user, '__await__') else test_user
        team = await test_team if hasattr(test_team, '__await__') else test_team
        member_user = await test_member_user if hasattr(test_member_user, '__await__') else test_member_user
        
        # Add the test member to the team
        team_member = TeamMember(
            team_id=team.id,
            user_id=member_user.id,
{{ ... }}
        self, 
        async_client: TestClient, 
        test_user: User,
        test_team: Team,
        test_member_user: User,
        async_db_session: AsyncSession
    ) -> None:
        """Test removing a team member."""
        # Get the actual user and team objects from the fixtures
        user = await test_user if hasattr(test_user, '__await__') else test_user
        team = await test_team if hasattr(test_team, '__await__') else test_team
            is_admin=False,
            joined_at=datetime.now(timezone.utc),
            is_active=True
        )
        db.add(team_member)
        await db.commit()
        
        # Verify the member exists before removal
        result = await db.execute(
            "SELECT * FROM team_members WHERE team_id = :team_id AND user_id = :user_id",
            {"team_id": team.id, "user_id": member_user.id}
        )
        assert result.fetchone() is not None
        
        # Create an access token for the test user (admin/owner)
        access_token = create_access_token(subject=user.id)
        
        # Make the request to remove the member
        response = await async_client.delete(
            f"/api/v1/teams/{team.id}/members/{member_user.id}",
            headers={"Authorization": f"Bearer {access_token}"}
        )
        
        # Verify the response
        assert response.status_code == status.HTTP_204_NO_CONTENT
        
        # Verify the member was removed from the database
        result = await db.execute(
            "SELECT * FROM team_members WHERE team_id = :team_id AND user_id = :user_id",
            {"team_id": team.id, "user_id": member_user.id}
        )
        assert result.fetchone() is None
        
        # Verify the member is no longer accessible via the API
        response = await async_client.get(
            f"/api/v1/teams/{team.id}/members/{member_user.id}",
            headers={"Authorization": f"Bearer {access_token}"}
        )
        assert response.status_code == status.HTTP_404_NOT_FOUND

    @pytest.mark.asyncio
    async def test_unauthorized_access(
        self, 
        async_client: TestClient, 
        test_team: Team,
        test_member_user: User
    ) -> None:
        """Test unauthorized access to team member endpoints."""
        # Get the actual team and user objects from the fixtures
        team = await test_team if hasattr(test_team, '__await__') else test_team
        if hasattr(team, '__await__'):
            team = await team
            
        member_user = await test_member_user if hasattr(test_member_user, '__await__') else test_member_user
        if hasattr(member_user, '__await__'):
            member_user = await member_user
        
        # Try to access team member endpoints without authentication
        response = await async_client.get(f"/api/v1/teams/{team.id}/members")
        assert response.status_code == status.HTTP_401_UNAUTHORIZED
        
        # Try to access team member endpoints with an invalid token
        response = await async_client.get(
            f"/api/v1/teams/{team.id}/members",
            headers={"Authorization": "Bearer invalid_token"}
        )
        assert response.status_code == status.HTTP_401_UNAUTHORIZED
        
        # Try to access a specific team member without authentication
        response = await async_client.get(f"/api/v1/teams/{team.id}/members/{member_user.id}")
        assert response.status_code == status.HTTP_401_UNAUTHORIZED
