[tool.poetry]
name = "gw2_wvwbuilder_backend"
version = "0.1.0"
description = "Backend for GW2 WvW Builder - Optimize WvW squad compositions"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.109.0"
uvicorn = {extras = ["standard"], version = "^0.27.0"}
sqlalchemy = "^2.0.25"
psycopg2-binary = "^2.9.9"
pydantic = "^2.6.0"
pydantic-settings = "^2.1.0"
python-multipart = "^0.0.6"
python-jose = {extras = ["cryptography"], version = "^3.5.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-dotenv = "^1.0.0"
alembic = "^1.13.1"
httpx = "^0.25.0"
email-validator = "^2.3.0"
itsdangerous = "^2.2.0"
python-json-logger = "^3.3.0"
redis = "^6.4.0"
fastapi-limiter = "^0.1.5"
asyncpg = "^0.28.0"  # Pour le support asynchrone de PostgreSQL
prometheus-client = "^0.20.0"  # Pour la surveillance des mÃ©triques
pyjwt = "^2.10.1"
aiohttp = "^3.13.0"
backoff = "^2.2.1"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.0"
pytest-cov = {extras = ["toml"], version = "^4.1.0"}
pytest-xdist = {extras = ["psutil"], version = "^3.5.0"}
pytest-asyncio = "^0.21.1"
pytest-mock = "^3.11.1"
pytest-factoryboy = "^2.5.1"
pytest-html = "^4.1.1"
pytest-env = "^1.1.3"
pytest-randomly = "^3.12.0"
pytest-freezegun = "^0.4.2"
pytest-httpx = "^0.27.0"
pytest-sugar = "^0.9.7"
Faker = "^22.0.0"
factory-boy = {extras = ["sqlalchemy"], version = "^3.3.0"}
coverage-badge = "^1.1.0"
aiosqlite = "^0.19.0"  # Required for async SQLite in tests
freezegun = "^1.5.1"

[tool.poetry.group.dev.dependencies]
black = "^24.1.0"
isort = "^5.13.2"
bandit = "^1.7.9"
mypy = "^1.7.1"
safety = "^3.0.1"
flake8 = "^7.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*", "test*"]
python_classes = ["Test*", "*Test"]
addopts = "-v --asyncio-mode=auto -x -p no:warnings"
filterwarnings = [
    "ignore::sqlalchemy.exc.SAWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore::DeprecationWarning:aiosqlite",
    "ignore::DeprecationWarning:sqlalchemy"
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "**/__init__.py",
    "**/migrations/*",
    "**/tests/*",
    "**/conftest.py",
    "**/main.py",
    "**/deps.py"
]
concurrency = ["greenlet"]
branch = true
parallel = true

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 90

[tool.coverage.html]
directory = "coverage_html"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
ignore_missing_imports = true
strict_optional = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
warn_no_return = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_calls = true
no_implicit_optional = true

# Ignore missing imports for these packages
[[tool.mypy.overrides]]
module = ["sqlalchemy.*", "alembic.*", "pydantic.*"]
ignore_missing_imports = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
disallow_untyped_decorators = false
disallow_incomplete_defs = true
