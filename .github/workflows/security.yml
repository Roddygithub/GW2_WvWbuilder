name: Security Scan

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'

# Set the permissions at the workflow level to avoid repetition
permissions:
  contents: read  # for actions/checkout to fetch code
  security-events: write  # for github/codeql-action/upload-sarif to upload SARIF results
  actions: read  # for github/codeql-action/init to get the Action's status

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install security tools
      run: pip install bandit safety

    - name: Detect secrets with Gitleaks
      uses: gitleaks/gitleaks-action@v2
      with:
        config-path: .github/gitleaks.toml
        report-format: json
        report-path: gitleaks-report.json
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Run bandit for static analysis
      # Scans for high-severity, high-confidence issues and outputs a JSON report.
      # The --skips argument allows ignoring specific findings listed in .bandit.skips
      run: |
        SKIP_FLAGS=""
        if [ -f "backend/.bandit.skips" ]; then
          SKIP_FLAGS="--skips $(paste -s -d, backend/.bandit.skips)"
        fi
        bandit -r backend/app -c backend/pyproject.toml --severity-level high --confidence-level high -f json -o bandit-report.json $SKIP_FLAGS

    - name: Check for vulnerable dependencies
      # We use poetry export to generate a requirements.txt on the fly for safety
      run: |
        poetry export -f requirements.txt --output backend/requirements.txt --without-hashes
        # Ignore specific vulnerabilities if needed using --ignore. Fails on any vulnerability found.
        safety check -r backend/requirements.txt --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always() # Always upload reports, even if a step fails
      with:
        name: security-reports
        path: |
          gitleaks-report.json
          bandit-report.json
          safety-report.json

    - name: Check for large files
      run: |
        find . -type f -size +5M -not -path "./.git/*" -not -path "*/node_modules/*" -print0 | xargs -0 ls -lh > large-files.txt
        if [ -s large-files.txt ]; then
          echo "::error::Large files detected! Committing large binary files to git is discouraged."
          cat large-files.txt
          exit 1
        fi

    - name: Notify on failure
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Attendre 30 secondes pour éviter les faux positifs ou les statuts transitoires
          await new Promise(resolve => setTimeout(resolve, 30000));
          
          // Vérifier si le statut d'échec est toujours d'actualité
          const { data: checkRuns } = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha
          });
          
          const failedChecks = checkRuns.check_runs.filter(run => 
            run.conclusion === 'failure' && 
            run.name === 'Security Scan'
          );
          
          if (failedChecks.length > 0) {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `⚠️ **Security Scan Failed!**\n\nOne or more security checks have failed.\n\n**Next Steps:**\n1. Review the workflow run logs\n2. Download the \`security-reports\` artifact for detailed scan results.\n3. Check the security guidelines for common issues.`
            });
          }