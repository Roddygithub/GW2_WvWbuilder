name: Backend Test & Coverage

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/test-and-coverage.yml'
      - 'pyproject.toml'
      - 'poetry.lock'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/test-and-coverage.yml'
      - 'pyproject.toml'
      - 'poetry.lock'

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev python3-dev

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.8.0'
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.create true
          
      - name: Install dependencies
        run: |
          cd backend
          # Install all dependencies
          poetry install --no-interaction --no-ansi
          # Install test dependencies
          poetry add --dev pytest pytest-cov codecov --no-interaction

      - name: Cache Poetry virtualenv
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: ./backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Install dependencies
        working-directory: ./backend
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-interaction --no-root
          poetry install --no-interaction

      - name: Run tests with coverage
        working-directory: ./backend
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          DATABASE_URL: "sqlite:///:memory:"
          PYTHONUNBUFFERED: 1
        run: |
          mkdir -p test-results
          set -o pipefail
          poetry run pytest tests/ \
            -v \
            --cov=app \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --cov-report=term-missing \
            --cov-fail-under=90 \
            --junitxml=test-results/junit.xml \
            --log-cli-level=INFO \
            2>&1 | tee test-results/pytest.log

      - name: Upload coverage to Codecov
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./backend/coverage.xml
          fail_ci_if_error: true
          verbose: true
          name: codecov-umbrella
          flags: unittests
          env_vars: OS,PYTHON
          path_to_write_report: ./coverage_report.txt
          working-directory: ./backend

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            ./backend/test-results/
            ./backend/coverage.xml
          retention-days: 7

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: |
            ./backend/coverage.xml
            ./backend/htmlcov/
          retention-days: 30

      - name: Upload logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: logs
          path: |
            ./backend/test-results/pytest.log
            ./backend/.pytest_cache/
          retention-days: 1
